input {
  redis {
    host => "localhost"
    type => "redis-input"
    data_type => "list"
    key => "logstash"
  }
}

################
# alfresco.log #
################
filter {
  if [type] == "alfrescoLog" {
    multiline {
      pattern => "(^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d,\d\d\d)"
      negate => true
      what => "previous"
    }

    mutate {
      gsub => [
        # replace double blank space with single blank space
        "message", "  ", " "
      ]
    }

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:logLevel} %{NOTSPACE:class} %{GREEDYDATA:data}" ]
      add_tag => [ "%{logLevel}" ]
      add_field => [ "classMsg", "%{class} %{data}" ]
    }

    date {
       match => ["logdate" , "yyyy-MM-dd HH:mm:ss,SSS"]
       target => "@timestamp"
    }

    grok {
      match => [ "message", "Exception" ]
      add_tag => [ "Exception"]
    }

    grok {
      match => [ "message", "NullPointerException" ]
      add_tag => [ "NullPointerException"]
    }

    grok {
      match => [ "message", "OutOfMemoryError" ]
      add_tag => [ "OutOfMemoryError"]
    }

    grok {
      match => [ "message", "Too many open files" ]
      add_tag => [ "TooManyOpenFiles"]
    }
  }
}

################
# share.log #
################
filter {
  if [type] == "shareLog" {
    multiline {
      pattern => "(^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d,\d\d\d)"
      negate => true
      what => "previous"
    }

    mutate {
      gsub => [
        # replace double blank space with single blank space
        "message", "  ", " "
      ]
    }

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:logLevel} %{NOTSPACE:class} %{GREEDYDATA:data}" ]
      add_tag => [ "%{logLevel}" ]
      add_field => [ "classMsg", "%{class} %{data}" ]
    }

    date {
       match => ["logdate" , "yyyy-MM-dd HH:mm:ss,SSS"]
       target => "@timestamp"
    }

    grok {
      match => [ "message", "Exception" ]
      add_tag => [ "Exception"]
    }

    grok {
      match => [ "message", "NullPointerException" ]
      add_tag => [ "NullPointerException"]
    }

    grok {
      match => [ "message", "OutOfMemoryError" ]
      add_tag => [ "OutOfMemoryError"]
    }

    grok {
      match => [ "message", "Too many open files" ]
      add_tag => [ "FileHandles"]
    }
  }
}


################
# solr.log #
################
filter {
  if [type] == "solrLog" {
    multiline {
        type => "solrLog"
        pattern => "(^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d,\d\d\d)"
        negate => true
        what => "previous"
    }

    mutate {
      gsub => [
      # replace double blank space with single blank space
      "message", "  ", " "
      ]
    }

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:logLevel} %{NOTSPACE:class} %{GREEDYDATA:data}" ]
      add_tag => [ "%{logLevel}" ]
      add_field => [ "classMsg", "%{class} %{data}" ]
    }

    date {
       match => ["logdate" , "yyyy-MM-dd HH:mm:ss,SSS"]
       target => "@timestamp"
    }

    grok {
      match => [ "message", "Exception" ]
      add_tag => [ "Exception"]
    }

    grok {
      match => [ "message", "NullPointerException" ]
      add_tag => [ "NullPointerException"]
    }

    grok {
      match => [ "message", "OutOfMemoryError" ]
      add_tag => [ "OutOfMemoryError"]
    }

    grok {
      match => [ "message", "Too many open files" ]
      add_tag => [ "FileHandles"]
    }
  }
}


#############
# audit.log #
#############
filter {
  if [type] == "auditAccessLog" {
    multiline {
      pattern => "(^AUDIT-RECORD)"
      negate => true
      what => "next"
    }

    grok {
      match => [ "message", "action=CREATE" ]
      add_field => [ "Operation", "CREATE" ]
    }

    grok {
      match => [ "message", "action=DELETE" ]
      add_field => [ "Operation", "DELETE" ]
    }

    grok {
      match => [ "message", "action=UPDATE CONTENT",
                 "message", "action=updateNodeProperties",
                 "message", "action=addNodeAspect",
                 "message", "action=deleteNodeAspect" ]
      add_field => [ "Operation", "UPDATE" ]
    }

    grok {
      match => [ "message", "action=READ" ]
      add_field => [ "Operation", "READ CONTENT" ]
    }

    grok {
      match => [ "message", "action=readContent" ]
      add_field => [ "Operation", "READ METADATA" ]
    }

    grok {
      match => [ "message", "action=CHECK OUT" ]
      add_field => [ "Operation", "CHECK OUT" ]
    }

    grok {
      match => [ "message", "action=CHECK IN" ]
      add_field => [ "Operation", "CHECK IN" ]
    }

    grok {
      match => [ "message", "action=COPY" ]
      add_field => [ "Operation", "COPY" ]
    }

    grok {
      match => [ "message", "action=MOVE" ]
      add_field => [ "Operation", "MOVE" ]
    }

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate}%{ISO8601_TIMEZONE}" ]
    }

    date {
       match => [ "logdate", "yyyy-MM-dd'T'HH:mm:ss.SSS" ]
       timezone => "Europe/London"
       target => "@timestamp"
    }

    grok {
      match => [ "message", "user: %{WORD:user}" ]
      add_field => [ "User", "%{user}" ]
    }

    mutate {
      gsub => [
        "message", "AUDIT-RECORD", ""
      ]
    }
  }
}

filter {
  if [type] == "auditAccessLog" {
    grep {
      match => [ "message", "action=" ]
    }
  }
}

filter {
  if [type] == "auditCMISLog" {
    multiline {
      pattern => "(^AUDIT-RECORD)"
      negate => true
      what => "next"
    }

    grok {
      match => [ "message", "CREATED" ]
      add_field => [ "Operation", "CREATE" ]
    }

    grok {
      match => [ "message", "UPDATED" ]
      add_field => [ "Operation", "UPDATE" ]
    }

    grok {
      match => [ "message", "DELETED" ]
      add_field => [ "Operation", "DELETE" ]
    }

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate}%{ISO8601_TIMEZONE}" ]
    }

    date {
       match => [ "logdate", "yyyy-MM-dd'T'HH:mm:ss.SSS" ]
       timezone => "Europe/London"
       target => "@timestamp"
    }

    grok {
      match => [ "message", "user: %{WORD:user}" ]
      add_field => [ "User", "%{user}" ]
    }
  }
}

####################
# Filter for Nginx #
####################

filter {
  if [type] == "nginx" {
    grok {
      match => [ "message", "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|-)\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"(?:%{URI:referrer}|-)\" %{QS:agent} %{NUMBER:request_time:float} %{NUMBER:response_time:float}",
                 "message", "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|-)\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"(?:%{URI:referrer}|-)\" %{QS:agent}"
                ]
    }

    date {
      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
      target => "@timestamp"
    }

    geoip {
      source => "clientip"
      add_field => [ "request", "%{request}" ]
    }
  }
}

################################
# Filter for Tomcat Access log #
################################

filter {
  if [type] == "TomcatAccessLog" {
    grok {
      match => [ "message", "%{IPORHOST:clientip} %{USER:ident} %{DATA:auth} \[%{HTTPDATE:timestamp}\] \"(%{WORD:verb} %{NOTSPACE:request} (HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:responseTime:float} \"%{DATA:thread}\"" ]
    }

    date {
      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
      target => "@timestamp"
    }

    geoip {
      source => "clientip"
      add_field => [ "request", "%{request}" ]
    }
  }
}

###########################
# output to elasticsearch #
###########################

output {
  #Uncomment for debugging purposes
  #stdout { codec => rubydebug }

  elasticsearch {
    host => "localhost"
    port => "9300"
    cluster => "elasticsearch-kibana"
  }
}
